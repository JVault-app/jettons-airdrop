slice null_addr() asm "b{00} PUSHSLICE";

cell  preload_ref_index(slice s, int n) asm "PLDREFVAR";

() send_msg(slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
    var body = begin_cell().store_uint(op, 32);
    if (op) {
        body = body.store_uint(query_id, 64);
    }
    ifnot (null?(payload)) {
        body = body.store_builder(payload);
    }

    var msg = begin_cell()
                .store_uint(0x10, 6)
                .store_slice(to_address)
                .store_coins(amount)
                .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_ref(body.end_cell());

    send_raw_message(msg.end_cell(), send_mode);
}


cell calculate_nft_item_state_init(int item_index, cell nft_item_code, slice collection_address) inline {
    cell data = begin_cell().store_uint(item_index, 64).store_slice(collection_address).end_cell();
    return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}


cell calculate_user_contract_state_init(slice owner_address, cell user_contract_code, int campaign_id, int public_key) inline {
    cell data = begin_cell()
                    .store_int(false, 1)
                    .store_slice(owner_address)
                    .store_slice(my_address())
                    .store_uint(campaign_id, 32)
                    .store_uint(public_key, 256)
                    .store_uint(0, 1)
                .end_cell();

    return begin_cell().store_uint(0, 2).store_dict(user_contract_code).store_dict(data).store_uint(0, 1).end_cell();
}


slice get_address_by_state_init(cell state_init) inline { 
    return begin_cell().store_uint(4, 3)
                        .store_int(0, 8)
                        .store_uint(cell_hash(state_init), 256)
                        .end_cell()
                        .begin_parse();
}


() send_jettons(int query_id, int jetton_amount, slice to_address, slice response_address, slice jetton_wallet_address, 
                int msg_value, int sending_mode, int forward_ton_amount, cell forward_payload) impure inline {

    builder msg_body = begin_cell()
                        .store_uint(op::transfer_jetton, 32)
                        .store_uint(query_id, 64)
                        .store_coins(jetton_amount)
                        .store_slice(to_address);
    ifnot (null?(response_address)) {
        msg_body = msg_body.store_slice(response_address);
    }
    else {
        msg_body = msg_body.store_uint(0, 2);
    }
    msg_body = msg_body.store_uint(0, 1)
                        .store_coins(forward_ton_amount)
                        .store_uint(1, 1);

    ifnot(null?(forward_payload)) {
        msg_body = msg_body.store_dict(forward_payload);
    }
    else {
        msg_body = msg_body.store_uint(0, 1);
    }

    builder msg = begin_cell()
                .store_uint(0x10, 6) 
                .store_slice(jetton_wallet_address)
                .store_coins(msg_value)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1)
                .store_uint(1, 1)
                .store_ref(msg_body.end_cell());
            
    send_raw_message(msg.end_cell(), sending_mode);  
}


() burn_jettons(int query_id, int jetton_amount, slice jetton_wallet_address,
                slice response_address, int msg_value, int sending_mode) impure inline {
    builder msg_body = begin_cell()
                        .store_uint(op::burn_jetton, 32)
                        .store_uint(query_id, 64)
                        .store_coins(jetton_amount)
                        .store_slice(response_address);

    builder msg = begin_cell()
                .store_uint(0x10, 6) 
                .store_slice(jetton_wallet_address)
                .store_coins(msg_value)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1)
                .store_uint(1, 1)
                .store_ref(msg_body.end_cell());
            
    send_raw_message(msg.end_cell(), sending_mode);  
}


builder int_to_str(int number) {
    builder string = begin_cell();
    tuple chars = null();
    do {
        int r = number~divmod(10);
        chars = cons(r + 48, chars);
    } until (number == 0);
    do {
        int char = chars~list_next();
        string~store_uint(char, 8);
    } until (null?(chars));
    
    return string;
}
