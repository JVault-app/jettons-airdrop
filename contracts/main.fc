#include "imports/stdlib.fc";
#include "imports/constants.fc";
#include "imports/utils.fc";


global int   storage::public_key;
global cell  storage::user_contract_code;
global slice storage::admin_address;

() load_data() impure inline {
    var ds = get_data().begin_parse();
    
    storage::public_key         = ds~load_uint(256);
    storage::user_contract_code = ds~load_ref();
    storage::admin_address      = ds~load_msg_addr();

    ds.end_parse();
}

() save_data() impure inline {
    set_data(
        begin_cell()
            .store_uint(storage::public_key, 256)
            .store_ref(storage::user_contract_code)
            .store_slice(storage::admin_address)
        .end_cell()
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { 
        return ();
    }

    load_data();
    
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { 
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::claim) {
        raw_reserve(gas::min_reserve, 4);

        slice owner_address = in_msg_body~load_msg_addr();
        int campaign_id = in_msg_body~load_uint(32);
        cell state_init = calculate_user_contract_state_init(owner_address, storage::user_contract_code, campaign_id, storage::public_key);
        slice expected_address = get_address_by_state_init(state_init);
        throw_unless(exc::incorrect_sender, equal_slices(expected_address, sender_address));
        
        cell jettons_to_claim = in_msg_body~load_dict();

        (int jetton_wallet_int, slice jetton_info, int success) = jettons_to_claim.udict_get_min?(256);
        while (success) {
            int jetton_amount = jetton_info~load_coins();
            slice jetton_wallet_address = begin_cell().store_uint(1024, 11).store_uint(jetton_wallet_int, 256).end_cell().begin_parse();
            
            send_jettons(query_id, jetton_amount, owner_address,owner_address, jetton_wallet_address,
                         gas::send_jettons, 0, 1, begin_cell().store_slice(jetton_info).end_cell());
            
            (jetton_wallet_int, jetton_info, success) = jettons_to_claim.udict_get_next?(256, jetton_wallet_int);
        }
        send_msg(owner_address, begin_cell().store_uint(op::excesses, 32).store_uint(query_id, 64).end_cell(), 0, mode::carry_remaining_balance);
        return ();
    }

    ;; Admin commands
    throw_unless(exc::incorrect_sender, equal_slices(sender_address, storage::admin_address)); 
    
    if (op == op::withdraw_ton) {
        raw_reserve(gas::min_reserve, 0);

        send_msg(storage::admin_address, begin_cell().store_uint(0, 32).store_slice("TON withdrawal").end_cell(), 0, mode::carry_remaining_balance);
        return ();
    } 

    if (op == op::withdraw_jettons) {
        raw_reserve(gas::min_reserve, 4);

        cell jettons_to_withdraw = in_msg_body~load_dict();
        (int jetton_wallet_int, slice jetton_info, int success) = jettons_to_withdraw.udict_get_min?(256);
        while (success) {
            int jetton_amount = jetton_info~load_coins();
            slice jetton_wallet_address = begin_cell().store_uint(1024, 11).store_uint(jetton_wallet_int, 256).end_cell().begin_parse();
            
            send_jettons(query_id, jetton_amount, storage::admin_address, storage::admin_address, jetton_wallet_address,
                         gas::send_jettons, 0, 1, begin_cell().store_uint(0, 32).store_slice("Jettons withdrawal").end_cell());
            
            (jetton_wallet_int, jetton_info, success) = jettons_to_withdraw.udict_get_next?(256, jetton_wallet_int);
        }

        send_msg(storage::admin_address, begin_cell().store_uint(op::excesses, 32).store_uint(query_id, 64).end_cell(), 0, mode::carry_remaining_balance);
        return ();
    }
}


int get_public_key() method_id {
    load_data();
    return storage::public_key;
}

cell get_user_contract_code() method_id {
    load_data();
    return storage::user_contract_code;
}

slice get_user_contract_address(slice owner_address, int campaign_id) method_id {
    cell state_init = calculate_user_contract_state_init(owner_address, storage::user_contract_code, campaign_id, storage::public_key);
    return get_address_by_state_init(state_init);
}